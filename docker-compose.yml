version: "3.7"

services:
  traefik:
    image: traefik:v2.6
    command:
      - --api.insecure=true
      - --providers.docker=true
      - --entrypoints.web.address=:80
    ports:
      - "80:80"
      - "8090:8090"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - "traefik.http.services.traefik.loadbalancer.server.port=8090"
      - "traefik.http.routers.api.rule=Host(`${PROXY_DOMAIN}`)"
      - "traefik.http.routers.api.service=api@internal"

  frontend:
    build:
      context: ./frontend
    labels:
      - "traefik.http.routers.frontend.rule=Host(`${FRONTEND_DOMAIN}`)"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
    depends_on:
      - backend

  backend:
    build:
      context: ./backend
    labels:
      - "traefik.http.routers.backend.rule=Host(`${BACKEND_DOMAIN}`) && PathPrefix(`/api`)"
      - "traefik.http.routers.backend.entrypoints=web"
      - "traefik.http.services.backend.loadbalancer.server.port=8000"
      - "traefik.http.middlewares.stripprefix.stripprefix.prefixes=/api"
      - "traefik.http.middlewares.stripprefix.stripprefix.forceSlash=false"
      - "traefik.http.routers.backend.middlewares=stripprefix"
    environment:
      - DATABASE_URL=${DATABASE_URL}
    depends_on:
      - db

  db:
    image: postgres:13
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data

  adminer:
    image: adminer
    labels:
      - "traefik.http.routers.adminer.rule=Host(`${ADMINER_DOMAIN}`)"
    ports:
      - "8080:8080"
    depends_on:
      - db

volumes:
  pgdata:
